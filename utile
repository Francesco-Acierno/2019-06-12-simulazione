DD per scegliere l'oggetto selezionato nel dd
forme = self._model.getForme(anno_int)
for f in forme:
    self._view._ddForma.options.append(
        ft.dropdown.Option(data=f, text=f, on_click=self.readDDForma))
self._view.update_page()

def readDDForma(self, e):
    if e.control.data is None:
        self._selectedForma = None
    else:
        self._selectedForma = e.control.data

controller
dist = self._view._txtDistanza.value

if dist is None:
    self._view.create_alert("Inserire una distanza e un provider")
    return
try:
    dist_float = float(dist)
except ValueError:
    self._view.create_alert("Inserire un valore valido nel campo distanza")
    return
self._model.buildGraph(self._choiceProvider, dist_float)
self._view.txt_result.controls.clear()
self._view.txt_result.controls.append(ft.Text("Grafo correttamente creato"))
self._view.txt_result.controls.append(ft.Text(f"Numero nodi: {len(self._model._grafo.nodes)}"))
self._view.txt_result.controls.append(ft.Text(f"Numero archi: {len(self._model._grafo.edges)}"))
self._view.update_page()

location = self._model._grafo.nodes
locationDD = [ft.dropdown.Option(x) for x in location]
self._view._ddTarget.options = locationDD
self._view.update_page()

query
@staticmethod
def getAllConnessioni(anno):
conn = DBConnect.get_connection()

result = []

cursor = conn.cursor(dictionary=True)
query = """select u1.id1 as n1, u2.id2 as n2, count(distinct idr1) as peso
           from (select  distinct u.user_id as id1, r.review_id as idr1, r.business_id as idb1
                 from reviews r, users u
                 where r.user_id = u.user_id
                 and YEAR(r.review_date)=%s) as u1,
                (select  distinct u.user_id as id2, r.review_id as idr2, r.business_id as idb2
                 from reviews r, users u
                 where r.user_id = u.user_id and YEAR(r.review_date)=%s) as u2
           where u1.id1 != u2.id2 and u1.idb1=u2.idb2
           group by u1.id1, u2.id2"""

cursor.execute(query, (anno, anno), )

for row in cursor:
    result.append((row["n1"], row["n2"], row["peso"]))

cursor.close()
conn.close()
return result


model
        for n in self._grafo.nodes():
            self._idMap[n.user_id] = n

        archi = DAO.getAllConnessioni(anno)
        for n1, n2, peso in archi:
            if n1 in self._idMap.keys() and n2 in self._idMap.keys():
                nodo1 = self._idMap[n1]
                nodo2 = self._idMap[n2]
                if self._grafo.has_edge(nodo1, nodo2) is False:
                    self._grafo.add_edge(nodo1, nodo2, weight=peso)
        return self._grafo

Controller di un grafo orientato
    def buildGraph(self, citta, anno):
        self._grafo.clear()
        self._grafo.add_nodes_from(DAO.getAllNodes(citta, anno))

        for b in self._grafo.nodes():
            self._idMap[b.business_id] = b

        archi = DAO.getAllConnessioni(citta, anno)
        for n1, n2, peso in archi:
            if n1 in self._idMap.keys() and n2 in self._idMap.keys():
                nodo1 = self._idMap[n1]
                nodo2 = self._idMap[n2]
                if self._grafo.has_edge(nodo1, nodo2) is False:
                    if peso > 0:
                        self._grafo.add_edge(nodo1, nodo2, weight=peso)
                    elif peso < 0:
                        self._grafo.add_edge(nodo2, nodo1, weight=-peso)

differenza tra archi uscenti ed entranti
migliori = {}
        pesoUscenti = 0
        pesoEntranti = 0
        peso = 0
        for n in self._grafo.nodes():
            peso = 0
            pesoEntranti = 0
            pesoUscenti = 0
            for v in self._grafo.out_edges(n):
                pesoUscenti += self._grafo[n][v[1]]['weight']
            for e in self._grafo.in_edges(n):
                pesoEntranti += self._grafo[e[0]][n]['weight']
            peso = pesoEntranti - pesoUscenti
            migliori[n] = peso
        miglioriOrdinati = sorted(migliori.items(), key=lambda x: x[1], reverse=False)
        return miglioriOrdinati[0]


ricorsione standard
    def getBestPath(self):
        self._soluzione = []
        self._costoMigliore = 0
        for n in self._grafo.nodes:
            if self._grafo.in_degree(n) == 0:
                parziale = [n]
        self._ricorsione(parziale)
        return self._soluzione, self._costoMigliore

    def _ricorsione(self, parziale):

        if self._grafo.out_degree(parziale[-1]) == 0:
            if len(parziale) > self._costoMigliore:
                self._soluzione = copy.deepcopy(parziale)
                self._costoMigliore = len(parziale)

        for n in self._grafo.neighbors(parziale[-1]):
            if n not in parziale:
                parziale.append(n)
                self._ricorsione(parziale)
                parziale.pop()


ricorsione componente connessa
 def getBestPath(self, canzone_preferita, memoria_massima):
        componente_connessa = list(nx.node_connected_component(self._grafo, canzone_preferita))
        parziale = [canzone_preferita]
        self._ricorsione(parziale, componente_connessa, memoria_massima)
        return self._soluzione, self._maxCanzoni

    def _ricorsione(self, parziale, componente_connessa, memoria_massima):
        memoria_utilizzata = self._calcolaMemoria(parziale)
        if memoria_utilizzata > memoria_massima:
            return

        if len(parziale) > self._maxCanzoni:
            self._soluzione = copy.deepcopy(parziale)
            self._maxCanzoni = len(parziale)

        for canzone in componente_connessa:
            if canzone not in parziale:
                parziale.append(canzone)
                self._ricorsione(parziale, componente_connessa, memoria_massima)
                parziale.pop()

    def _calcolaMemoria(self, lista_canzoni):
        memoria_totale = 0
        for canzone in lista_canzoni:
            memoria_totale += canzone.Bytes
        return memoria_totale

ricorsione con pesi crescenti

    def getBest(self, prodotto):
        parziale = [prodotto]
        self.ricorsione(parziale)
        return len(self.solBest)

    def pesoCrescente(self, parziale):
        peso = 0
        for par in range(1, len(parziale)):
            if par == 1:
                peso = self._grafo[parziale[par - 1]][parziale[par]]['weight']
            else:
                if peso > self._grafo[parziale[par - 1]][parziale[par]]['weight']:
                    return False
                else:
                    peso = self._grafo[parziale[par - 1]][parziale[par]]['weight']
        return True

    def ricorsione(self, parziale):
        if self.pesoCrescente(parziale) is False and len(parziale) > 1:
            if len(self.solBest) < len(parziale):
                self.solBest = copy.deepcopy(parziale)
        else:
            for neighbor in self._grafo.neighbors(parziale[-1]):
                if neighbor not in parziale:
                    parziale.append(neighbor)
                    self.ricorsione(parziale)
                    parziale.pop()


from dataclass import dataclass

@dataclass
class Avvistamenti
    id: int
    datetime: int
    city: str
    state: str
    country: str
    shape: str
    duration: int
    duration_hm: str
    comments: str
    date_posted: str
    latitude: float
    longitude: float

    def __hash__(self):
        return hash(self.id)



query alessia
select count(*) as peso
from (select s.`datetime` as d1
from sighting s
where s.country ='us' and s.state =%s
and year(s.`datetime`)=%s) as t1,
(select s.`datetime` as d2
from sighting s
where s.country ='us' and s.state =%s
and year(s.`datetime`)=%s) as t2
where d1<d2

def addEdges(self,anno):
        self.grafo.clear_edges()
        for nodo1 in self.grafo.nodes:
            for nodo2 in self.grafo.nodes:
                if nodo1!=nodo2 and self.grafo.has_edge(nodo1,nodo2)==False:
                    if DAO.getPeso(nodo1,anno,nodo2)>0:
                     self.grafo.add_edge(nodo1,nodo2)


select count(*) as c " +
				"from sighting s1, sighting s2 " +
				"where year(s1.datetime)=year(s2.datetime) " +
				"and year(s1.datetime)=? " +
				"and s1.country='us' " +
				"and s2.country='us' " +
				"and s1.state=? " +
				"and s2.state=? " +
				"and s2.datetime>s1.datetime";